name: Security Scan

on:
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - '**/package.json'
      - '**/package-lock.json'
      - 'Dockerfile*'

jobs:
  security-scan:
    name: Comprehensive Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Container Security Scanning
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    # NPM Audit for all packages
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Audit frontend dependencies
      run: |
        cd dashboard
        npm audit --audit-level=moderate --json > ../frontend-audit.json || true
        npm audit --audit-level=moderate || echo "Frontend vulnerabilities found"

    - name: Audit backend-mock dependencies
      run: |
        cd backend-mock
        npm audit --audit-level=moderate --json > ../backend-mock-audit.json || true
        npm audit --audit-level=moderate || echo "Backend-mock vulnerabilities found"

    - name: Audit backend-live dependencies
      run: |
        cd backend-live
        npm audit --audit-level=moderate --json > ../backend-live-audit.json || true
        npm audit --audit-level=moderate || echo "Backend-live vulnerabilities found"

    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    # Docker Image Scanning
    - name: Build Docker images for scanning
      run: |
        docker build -t mev-shield-frontend:scan ./dashboard -f ./dashboard/Dockerfile.production
        docker build -t mev-shield-backend-mock:scan ./backend-mock
        docker build -t mev-shield-backend-live:scan ./backend-live

    - name: Scan Docker images with Trivy
      run: |
        trivy image --format sarif --output docker-frontend-results.sarif mev-shield-frontend:scan
        trivy image --format sarif --output docker-backend-mock-results.sarif mev-shield-backend-mock:scan
        trivy image --format sarif --output docker-backend-live-results.sarif mev-shield-backend-live:scan

    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: docker-*-results.sarif

    # OWASP Dependency Check
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'MEV-Shield'
        path: '.'
        format: 'SARIF'
        out: 'dependency-check-results.sarif'

    - name: Upload OWASP scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: dependency-check-results.sarif

    # Generate Security Report
    - name: Generate security summary
      run: |
        echo "# MEV Shield Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## NPM Audit Results" >> security-report.md
        echo "### Frontend" >> security-report.md
        if [ -f frontend-audit.json ]; then
          jq '.metadata.vulnerabilities' frontend-audit.json >> security-report.md || echo "No vulnerabilities data" >> security-report.md
        fi
        
        echo "### Backend Mock" >> security-report.md
        if [ -f backend-mock-audit.json ]; then
          jq '.metadata.vulnerabilities' backend-mock-audit.json >> security-report.md || echo "No vulnerabilities data" >> security-report.md
        fi
        
        echo "### Backend Live" >> security-report.md
        if [ -f backend-live-audit.json ]; then
          jq '.metadata.vulnerabilities' backend-live-audit.json >> security-report.md || echo "No vulnerabilities data" >> security-report.md
        fi

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: |
          security-report.md
          *-audit.json
          trivy-results.sarif
          docker-*-results.sarif
          dependency-check-results.sarif
        retention-days: 90

    # Notify on critical vulnerabilities
    - name: Check for critical vulnerabilities
      run: |
        CRITICAL_COUNT=$(grep -c "CRITICAL" trivy-results.sarif || echo "0")
        if [ "$CRITICAL_COUNT" -gt "0" ]; then
          echo "ðŸš¨ Critical vulnerabilities found: $CRITICAL_COUNT"
          echo "critical_found=true" >> $GITHUB_ENV
        else
          echo "âœ… No critical vulnerabilities found"
          echo "critical_found=false" >> $GITHUB_ENV
        fi

    - name: Create security issue
      if: env.critical_found == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Critical Security Vulnerabilities Detected',
            body: `Critical security vulnerabilities have been detected in the MEV Shield codebase.
            
            **Scan Details:**
            - Date: ${new Date().toISOString()}
            - Workflow: ${context.workflow}
            - Run ID: ${context.runId}
            
            Please review the security scan results and address these vulnerabilities immediately.
            
            View the full report in the workflow artifacts.`,
            labels: ['security', 'critical', 'bug']
          });