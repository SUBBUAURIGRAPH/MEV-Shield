# Secure Docker Compose configuration for MEV Shield
# This configuration implements security best practices including:
# - Non-root user execution
# - Read-only root filesystem
# - Capability dropping
# - Resource limits
# - Network isolation
# - Secret management

version: '3.8'

# Define custom networks for network segmentation
networks:
  mev-shield-internal:
    driver: bridge
    internal: false
    driver_opts:
      com.docker.network.bridge.name: mev-shield-br0
    ipam:
      config:
        - subnet: 172.20.0.0/16
  mev-shield-database:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: mev-shield-db-br0
    ipam:
      config:
        - subnet: 172.21.0.0/16
  mev-shield-cache:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: mev-shield-cache-br0
    ipam:
      config:
        - subnet: 172.22.0.0/16

# Define named volumes with proper permissions
volumes:
  mev-shield-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/mev-shield
      o: bind,uid=10001,gid=10001,mode=0700
  postgres-data:
    driver: local
    driver_opts:
      type: none  
      device: ${PWD}/data/postgres
      o: bind,uid=999,gid=999,mode=0700
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/redis
      o: bind,uid=999,gid=999,mode=0700
  mev-shield-logs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/logs
      o: bind,uid=10001,gid=10001,mode=0755

# Define secrets for sensitive configuration
secrets:
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  
services:
  # MEV Shield main application
  mev-shield:
    build:
      context: .
      dockerfile: Dockerfile.secure
      target: production
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: mev-shield:secure-latest
    container_name: mev-shield-app
    hostname: mev-shield-app
    
    # Security: Run as non-root user
    user: "10001:10001"
    
    # Security: Read-only root filesystem
    read_only: true
    
    # Security: Temporary filesystem for writable areas
    tmpfs:
      - /tmp:noexec,nosuid,size=100m,uid=10001,gid=10001
      - /app/tmp:noexec,nosuid,size=50m,uid=10001,gid=10001
    
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    
    # Security: Prevent privilege escalation
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:runtime/default
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
          pids: 100
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Restart policy
    restart: unless-stopped
    
    # Environment variables (non-sensitive)
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - RUST_LOG=info
      - API_PORT=8080
      - DATABASE_HOST=postgres
      - REDIS_HOST=redis
      - MEV_SHIELD_CONFIG=/app/config/config.toml
      - MEV_SHIELD_DATA_DIR=/app/data
      - MEV_SHIELD_LOG_DIR=/app/logs
    
    # Secrets mounted as files
    secrets:
      - jwt_secret
      - db_password
    
    # Port exposure (only internal network)
    expose:
      - "8080"
    
    # External port mapping (use reverse proxy in production)
    ports:
      - "127.0.0.1:8080:8080"
    
    # Volume mounts
    volumes:
      - mev-shield-data:/app/data:rw
      - mev-shield-logs:/app/logs:rw
    
    # Network configuration
    networks:
      - mev-shield-internal
      - mev-shield-database
      - mev-shield-cache
    
    # Dependencies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["/app/mev-shield-cli", "health-check", "--timeout=10"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        compress: "true"

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: mev-shield-postgres
    hostname: mev-shield-postgres
    
    # Security: Run as postgres user (uid=999)
    user: "999:999"
    
    # Security: Read-only root filesystem with writable data areas
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=10m,uid=999,gid=999
    
    # Security hardening
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
          pids: 50
        reservations:
          cpus: '0.25'
          memory: 256M
    
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - POSTGRES_DB=mev_shield_db
      - POSTGRES_USER=mev_shield_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - PGDATA=/var/lib/postgresql/data
    
    # Secrets
    secrets:
      - db_password
    
    # Volume mounts
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - ./migrations:/docker-entrypoint-initdb.d:ro
    
    # Network isolation
    networks:
      - mev-shield-database
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mev_shield_user -d mev_shield_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mev-shield-redis
    hostname: mev-shield-redis
    
    # Security: Run as redis user (uid=999)
    user: "999:999"
    
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    # Security hardening
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
          pids: 20
        reservations:
          cpus: '0.1'
          memory: 128M
    
    restart: unless-stopped
    
    # Redis configuration
    command: >
      redis-server
      --requirepass $$(cat /run/secrets/redis_password)
      --maxmemory 256m
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
      --dir /data
      --bind 0.0.0.0
      --protected-mode yes
      --port 6379
    
    # Secrets
    secrets:
      - redis_password
    
    # Volume mounts
    volumes:
      - redis-data:/data:rw
    
    # Network isolation
    networks:
      - mev-shield-cache
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: mev-shield-proxy
    hostname: mev-shield-proxy
    profiles: ["proxy", "production"]
    
    # Security
    user: "101:101"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/cache/nginx:noexec,nosuid,size=50m,uid=101,gid=101
      - /var/run:noexec,nosuid,size=10m,uid=101,gid=101
    
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
          pids: 20
        reservations:
          cpus: '0.1'
          memory: 64M
    
    restart: unless-stopped
    
    # Port exposure
    ports:
      - "443:443"
      - "80:80"
    
    # Configuration
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    
    networks:
      - mev-shield-internal
    
    depends_on:
      - mev-shield
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"

  # Monitoring (Prometheus - optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mev-shield-prometheus
    hostname: mev-shield-prometheus
    profiles: ["monitoring"]
    
    user: "65534:65534"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    restart: unless-stopped
    
    ports:
      - "127.0.0.1:9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    
    networks:
      - mev-shield-internal
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'

# Health check script for the entire stack
x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s